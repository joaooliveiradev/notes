# Basics

## Some types

```elixir
# Integer
IO.puts(1)

# Integer
IO.puts(0x123)

# Boolean
IO.puts(2 + 3 === 5)

# Float
IO.puts(1.0)

# Atom
IO.puts(:name)

# String
IO.puts("String")

# Lists
IO.inspect([1, 2, 3])

# Tuples
IO.inspect({1, 2, 3})
```

## Puts vs Inspect

In the previous example of basic types i used ```IO.puts``` and ```IO.Inspect```

<br />

The difference between these two options of printing it's the ```IO.puts``` just work for data types that implements ```String.Chars``` protocol, basically data types that can be used on ``` to_string/1``` function.

Using IO.puts to printing tuples and list's will be not a good idea. If you want print using IO.puts anyway they should be convert to string first.

```elixir
IO.puts([1, 2, 3])
```

```IO.inspect``` basically work for every data type and plus have some options to us be able to prettify the output with some options.

```elixir
# Note: To see all the options check IO.Inspect docs at https://hexdocs.pm/elixir/Inspect.Opts.html
# Note: Should use limit: infinity to able to print larger structures.
IO.inspect([1, 2, 3], label: 'This list has these values', limit: 2)
```

Good additional reading about this [discussion](https://medium.com/@timotejfartek/when-to-use-elixirs-io-puts-and-when-io-inspect-6eb005d80d90).

<br />

TL;DR of this article:

* IO.puts/2 for simple string messages where you are certain the input is parsable to a string
* IO.inspect/2 for outputting any type of data. It can also be chained for maximum awesomeness
* Combine inspect/2 and IO.puts/2 for better messages
* Use the options limit: :infinity for printing very large structures and label: "your label" for labeling your output in IO.inspect/2

## Arithmetics

```elixir
# Sum -> Integer
# 3
IO.puts(1 + 2)

# Mult -> Integer
# 10
IO.puts(2 * 5)

# Divider -> Float
# Note: Using / to divide, always return a float
# To divide and return a integer you can use div
# 2.0
IO.puts(10 / 5)

# Divider -> Integer 
# 2
IO.puts(Kernel.div(10, 5))

# Remainder -> Integer
# 1
IO.puts(Kernel.rem(10, 3))

# Documentation Note: Notice that Elixir allows you to drop the parentheses when invoking 
# named functions with at least one argument. this feature gives a cleaner syntax when writing
# declarations and control-flow constructs. 
# However, Elixir developers generally prefer to use parentheses

# Elixir supports you to put Hexadecimal, Octal and binary numbers to Integer.
# 16 
IO.puts(0x10)
# 8
IO.puts(0o10)
# 2
IO.puts(0b10)

# Float also supports (e) for scientific notation.
IO.puts(1.0e10)
```

<b>
Documentation Note:
</b>

<br />

You can invoke the round function to get the closest integer to a given float, or the trunc function to get the integer part of a float.

```elixir
# Doc: Returns the integer part of number.
# 3 
IO.puts(Kernel.trunc(3.999999))

# Doc: Rounds a number to the nearest integer
# 3 
IO.puts(Kernel.round(3.4999999))
# 4
IO.puts(Kernel.round(3.5))
```

## Identifying functions and documentation

In Elixir, to identify function, we have their names ```Kernel.trunc``` and arity ```/1 -> One Argument, /2 -> Two Arguments, ...etc``` so with this, it's possible to understand the syntax ```Kernel.trunc/1```  or ```Kernel.trunc/2```. <br/>

Note: The ``` Kernel.trunc/2``` it's just a example, it's doesn't exist in Elixir. <br>

We also have in Elixir, a keyword or operator named ```h``` but this only works in the Interactive Elixir Shell using the iex on the terminal. <br>

With the ```h``` we can use ``` h Kernel.trunc ``` and he will display a explanation about these function on the terminal with examples.

We also can use the ```h``` to display module explanations and operators explanation.

<b>
Module example:
</b>

<b>
Operator example:
</b>

## Booleans

Elixir has some built in functions to work with booleans.

```elixir
# true
IO.puts(is_boolean(false))
# true
IO.puts(is_boolean(true))

# Some specific checks:
# false
IO.puts(is_atom('STR'))
# false
IO.puts(is_float(1))
# false
IO.puts(is_function(:function))
# true
IO.puts(is_integer(1))
```

There a lot of functions to specific checks, i will not put a all examples of them, normally if you type ```is_``` your code editor will auto complete all the functions that the Elixir provides. <br>

This functions are commonly used in a lot of cases of course but a good case to use is when we are implementing [Guards](https://hexdocs.pm/elixir/guards.html).<br >
It's a good research for the future, i will not annotate those things here because i think we need to go in baby steps for now.
